@startuml Single_Machine
Title Single Machine

node "computer" {
    interface "Protobuf Serializer" as ProtobufSerializer
    interface "Protobuf Deserializer" as ProtobufDeserializer
    cloud "Protobuf" as protobuf
    [Application(Dart)] as application
    [Dispatcher(Dart)] as dispatcher
    [LocalClient (Dart)] as localClientDart #FFDDDD 
    [LocalReceiver (Rust)] as localReceiver #FFDDDD 
    [Domain (Rust)] as domain
    [Repository (Rust)] as repository
    [FirestoreClient (Rust)] as firestoreClient
    [PostgresClient(Rust)] as postgresClient
    [GitClient(Rust)] as gitClient


    [Presentation(Flutter)] --> application
    application --> dispatcher
    dispatcher --> ProtobufSerializer
    domain --> repository
    repository --> firestoreClient
    repository --> postgresClient
    repository --> gitClient
    localClientDart --> ProtobufDeserializer
    localReceiver ..> ProtobufDeserializer
    localReceiver --> domain
    localClientDart ..> ProtobufSerializer
    protobuf .. ProtobufSerializer
    protobuf .. ProtobufDeserializer

}

node "Firestore" {
    database FirestoreDb
    firestoreClient --> FirestoreDb
}

node "Postgres" {
    database PostgresDb
    postgresClient --> PostgresDb
}

node "Git" {
    database GitDb
    gitClient --> GitDb
}
@enduml




@startuml Web_based
Title Web based

cloud "http"

node "computer" {
    interface "Protobuf Serializer" as ProtobufSerializer
    cloud "Protobuf" as protobuf
    [Application(Dart)] as application
    [Dispatcher(Dart)] as dispatcher
    [HttpClient(Dart)] as httpClient #9999FF

    [Presentation(Flutter)] --> application
    application --> dispatcher
    dispatcher --> ProtobufSerializer
    httpClient ..> ProtobufSerializer
    httpClient --> http
    protobuf .. ProtobufSerializer

}

node "server" {
    interface "Protobuf Deserializer" as ProtobufDeserializer
    cloud "Protobuf" as protobuf2
    [Domain (Rust)] as domain
    [LocalReceiver (Rust)] as localReceiver #9999FF
    [Repository (Rust)] as repository
    [FirestoreClient (Rust)] as firestoreClient
    [PostgresClient(Rust)] as postgresClient
    [GitClient(Rust)] as gitClient
    
    localReceiver --> http
    localReceiver --> domain
    localReceiver ..> ProtobufDeserializer
    domain --> repository
    repository --> firestoreClient
    repository --> postgresClient
    repository --> gitClient
    protobuf2 .. ProtobufDeserializer
}

node "Google Server" {
    database FirestoreDb
    firestoreClient --> FirestoreDb
}

node "Postgres" {
    database PostgresDb
    postgresClient --> PostgresDb

}

node "GitHub" {
    database GitDb
    gitClient --> GitDb
}

@enduml
