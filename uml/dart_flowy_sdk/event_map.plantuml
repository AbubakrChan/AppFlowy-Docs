@startuml FlowySDK
title FFI
left to right direction
skinparam linetype polyline

package "Front-end (Flutter)" #DDDDDD {
    component Repository_A as "Repository"
    component FFI_Frontend as "FFI" #FFDDDD
}

package "Back-end (Rust)" #DDDDDD {
    component FFI_Backend as "FFI" #FFDDDD
    component Dispatcher
    component Module
}

Repository_A ..> FFI_Frontend : 1.Event + Protobuf
FFI_Frontend --> FFI_Backend : 2.Bytes
FFI_Backend --> Dispatcher : 3.Event + Protobuf
Dispatcher --> Module: 4.Protobuf
@enduml


@startuml FlowySDK
title Protobuf Code Generation
left to right direction
skinparam linetype polyline
'skinparam monochrome reverse

frame Part_One {
    node "Event" #DDDDDD {
        file EventSource as "event_map.rs" #FFDDDD
        file EventCodeGen as "build.rs" #FFDDDD
        file EventDefine as "event_map.proto" #FFDDDD
    }
    note left of EventSource
    enum FolderEvent {
        #[event(input = "ExportPayload", output = "ExportData")]
        ExportDocument = 0,
    }
    end note

    node "Protobuf" #DDDDDD {
        file PBSource as "share.rs" #FFDDDD
        file PBCodeGen as "build.rs" #FFDDDD
        file PBDefine as "share.proto" #FFDDDD
    }
    note left of PBSource
    struct ExportData {
        #[pb(index = 1)]
        pub data: String,

        #[pb(index = 2)]
        pub export_type: ExportType,
    }
    end note

    EventSource -> EventCodeGen
        EventCodeGen -> EventDefine
        PBSource -> PBCodeGen
        PBCodeGen -> PBDefine
}

frame Part_Two {
    node "Build.rs" #DDDDDD {
        component Builder as "Protoc Compiler" #F7931E
    }
}


frame Part_Three {
    component Protobuf_Files_Dart as "Protobuf Files" #DDDDDD {
        file dart_event as "event_map.pb.dart" #FFDDDD
        file dart_pb as "share.pb.dart" #FFDDDD
    }

    component Protobuf_Files_Rust as "Protobuf Files" #DDDDDD {
        file rust_event as "event_map.rs" #FFDDDD
        file rust_pb as "share.rs" #FFDDDD
    }
}

frame Part_Four {
    package "Front-end (Flutter)" #DDDDDD {
        component Repository
    }

    package "Back-end (Rust)" #DDDDDD {
        component Module
    }
}

EventDefine -[#blue]-> Builder
PBDefine -[#blue]-> Builder

Builder -[#DarkGreen]-> dart_event
Builder -[#DarkGreen]-> dart_pb
Builder -[#DarkGreen]-> rust_event
Builder -[#DarkGreen]-> rust_pb

Repository -[bold]up-> dart_event
Repository -[bold]up-> dart_pb

Module -[bold]up-> rust_event
Module -[bold]up-> rust_pb
@enduml


@startuml FlowySDK
title Protobuf Communication
top to bottom direction
'skinparam linetype polyline

rectangle {
    package "Front-end (Flutter)" #DDDDDD {
        component Repository
        component FFI_Frontend as "FFI" #FFDDDD
    }
    note left of Repository
    class FolderEventExportDocument {
        Future<Either<ExportData, FlowyError>> send() {
            ...
        }
    }
    end note

    package "Back-end (Rust)" #DDDDDD {
        component Module
        component Dispatcher as "Dispatcher" #FFDDDD
        component FFI_Backend as "FFI" #FFDDDD
    }
    note left of Module
    pub(crate) async fn export_handler(
        data: Data<ExportPayload>,
        controller: Unit<Arc<ViewController>>,
    ) -> DataResult<ExportData, FlowyError> {
        ...
    }
    end note
}

Repository --> Repository: 1.ExportPayload
Repository --> FFI_Frontend: 2. Event + ExportPayload
FFI_Frontend --> FFI_Backend: 3.Bytes
FFI_Backend --> Dispatcher: 4: Event + ExportPayload
Dispatcher --> Module: 5.ExportPayload
Module --> Module : 6. call export_handler
@enduml



